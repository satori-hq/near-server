{"mappings":";;;;;;;C,U;;C,U;A,M,C,c,C,yB,G,U;I,K,E,I;;A,yB,C,e,G,yB,C,a,G,yB,C,O,Q,C;;S,wC,C,G,E,O,E,M,E,K,E,M,E,G,E,G,E,C;Q,C;Q,G,C,I,G,G,C,G,E,G;Q,G,C,K,G,I,C,K;I,C,Q,K,E,C;Q,M,C,K;;I,C;I,E,E,I,C,I,E,O,C,K;S,O,C,O,C,K,E,I,C,K,E,M;A,C;S,uC,C,E,E,C;sB,C;Q,G,C,I,S,I,G,S;e,G,C,O,U,O,E,M,E,C;Y,G,C,G,G,E,C,K,C,I,E,I;qB,K,C,K,E,C;gB,wC,C,G,E,O,E,M,E,K,E,M,G,I,G,K;Y,C;qB,M,C,G,E,C;gB,wC,C,G,E,O,E,M,E,K,E,M,G,K,G,G;Y,C;Y,K,C,S;Q,C;I,C;A,C;;ACMO,GAAA,CAAM+C,6BAAO,GAAb,EAAA,AAAA,SAAA,AAAA,EAAA,YAAA,CAAA;IAAa,GAAA,CAAA,IAAA,GAAA,uCAAA,CAAA,EAAA,AAAA,SAAA,AAAA,EAAA,CAAA,kBAAA,CAAA,IAAA,UAAG,OAAA,CAAOI,UAAP,EAAmBQ,gBAAnB,EAAH,CAAA;eAAG,kBAAA,CAAA,IAAA,UAAA,QAAA,CAAA,QAAA,EAAA,CAAA;kBAAA,IAAA,QAAA,QAAA,CAAA,IAAA,GAAA,QAAA,CAAA,IAAA;qBAAA,CAAA;oBAAA,QAAA,CAAA,IAAA,GAAA,CAAA;oBAAA,QAAA,CAAA,IAAA,GAAA,CAAA;2BAERpB,qCAAAA,CAAYqB,YAAZ,CAAyBT,UAAzB,GAAqC,YAArC;wBAAuDQ,gBAAgB,EAAhBA,gBAAAA;;qBAF/C,CAAA;2BAAA,QAAA,CAAA,MAAA,EAAA,MAAA,GAAA,QAAA,CAAA,IAAA;qBAAA,CAAA;oBAAA,QAAA,CAAA,IAAA,GAAA,CAAA;oBAAA,QAAA,CAAA,EAAA,GAAA,QAAA,EAAA,KAAA,GAAA,CAAA;oBAIrBE,OAAO,CAACC,IAAR,EAAa,aAAb,GAAAD,QAAAA,CAAAA,EAAAA;2BAJqB,QAAA,CAAA,MAAA,EAAA,MAAA,GAKd,IALc;qBAAA,EAAA;sBAAA,GAAA;2BAAA,QAAA,CAAA,IAAA;;QAAA,CAAA,EAAA,OAAA,EAAA,IAAA;;gBAAA,CAAA;gBAAA,CAAA;;;IAAA,CAAH;oBAAPd,OAAO,CAAA,EAAA,EAAA,GAAA,EAAA,CAAA;eAAA,IAAA,CAAA,KAAA,OAAA,SAAA;IAAA,CAAA;AAAA,CAAA;A,yB,C,O,G,6B;AASb,GAAA,CAAMC,mCAAa,GAAnB,EAAA,AAAA,SAAA,AAAA,EAAA,YAAA,CAAA;IAAmB,GAAA,CAAA,KAAA,GAAA,uCAAA,CAAA,EAAA,AAAA,SAAA,AAAA,EAAA,CAAA,kBAAA,CAAA,IAAA,UAAG,QAAA,CAAOG,UAAP,EAAmBQ,gBAAnB,EAAH,CAAA;eAAG,kBAAA,CAAA,IAAA,UAAA,SAAA,CAAA,SAAA,EAAA,CAAA;kBAAA,IAAA,QAAA,SAAA,CAAA,IAAA,GAAA,SAAA,CAAA,IAAA;qBAAA,CAAA;oBAAA,SAAA,CAAA,IAAA,GAAA,CAAA;oBAAA,SAAA,CAAA,IAAA,GAAA,CAAA;2BAEdpB,qCAAAA,CAAYqB,YAAZ,CAAyBT,UAAzB,GAAqC,mBAArC;wBAA8DQ,gBAAgB,EAAhBA,gBAAAA;;qBAFhD,CAAA;2BAAA,SAAA,CAAA,MAAA,EAAA,MAAA,GAAA,SAAA,CAAA,IAAA;qBAAA,CAAA;oBAAA,SAAA,CAAA,IAAA,GAAA,CAAA;oBAAA,SAAA,CAAA,EAAA,GAAA,SAAA,EAAA,KAAA,GAAA,CAAA;oBAI3BE,OAAO,CAACC,IAAR,EAAa,mBAAb,GAAAD,SAAAA,CAAAA,EAAAA;2BAJ2B,SAAA,CAAA,MAAA,EAAA,MAAA,GAKpB,CALoB;qBAAA,EAAA;sBAAA,GAAA;2BAAA,SAAA,CAAA,IAAA;;QAAA,CAAA,EAAA,QAAA,EAAA,IAAA;;gBAAA,CAAA;gBAAA,CAAA;;;IAAA,CAAH;oBAAbb,aAAa,CAAA,GAAA,EAAA,GAAA,EAAA,CAAA;eAAA,KAAA,CAAA,KAAA,OAAA,SAAA;IAAA,CAAA;AAAA,CAAA;A,yB,C,a,G,mC;AASnB,GAAA,CAAMe,qCAAe,GAAGL,gBAAA,CAAUO,SAAV,EAAqBjE,OAAO,CAACC,GAAR,CAAYiE,iBAAZ,KAAiC,sBAAtD;A,yB,C,e,G,qC;;;;C,U;A,M,C,c,C,yB,G,U;I,K,E,I;;A,yB,C,gB,G,yB,C,a,Q,C;;S,wC,C,G,E,O,E,M,E,K,E,M,E,G,E,G,E,C;Q,C;Q,G,C,I,G,G,C,G,E,G;Q,G,C,K,G,I,C,K;I,C,Q,K,E,C;Q,M,C,K;;I,C;I,E,E,I,C,I,E,O,C,K;S,O,C,O,C,K,E,I,C,K,E,M;A,C;S,uC,C,E,E,C;sB,C;Q,G,C,I,S,I,G,S;e,G,C,O,U,O,E,M,E,C;Y,G,C,G,G,E,C,K,C,I,E,I;qB,K,C,K,E,C;gB,wC,C,G,E,O,E,M,E,K,E,M,G,I,G,K;Y,C;qB,M,C,G,E,C;gB,wC,C,G,E,O,E,M,E,K,E,M,G,K,G,G;Y,C;Y,K,C,S;Q,C;I,C;A,C;ACjBxB,GAAA,CAAM5B,mCAAa,YAAbA,aAAgB,CAAC6B,SAAD,EAAYxB,SAAZ,EAAtB,CAAA;WAAgDZ,yCAAAA,CAAgBqC,YAAhB;QACtDjB,UAAU,EAAEvC,mCADuE;QAEnFyD,UAAU,GAAE,cAFuE;QAGnFC,IAAI;YACHC,cAAc,EAAEJ,SADX;YAELK,cAAc,EAAE7B,SAAhB6B;;QAEDlB,GAAG,EAAEmB,GAP8E;QAQnFlB,eAAe,EAAEmB,4CAAjBnB;;AAR4B,CAAtB;A,yB,C,a,G,mC;AAWA,GAAA,CAAMN,sCAAgB,GAAtB,EAAA,AAAA,SAAA,AAAA,EAAA,YAAA,CAAA;IAAsB,GAAA,CAAA,IAAA,GAAA,uCAAA,CAAA,EAAA,AAAA,SAAA,AAAA,EAAA,CAAA,kBAAA,CAAA,IAAA,UAAG,OAAA,CAAOkB,SAAP,EAAH,CAAA;QAAG,GAAA,CAAA,OAAA,EAAA,KAAA,EAAA,WAAA;eAAA,kBAAA,CAAA,IAAA,UAAA,QAAA,CAAA,QAAA,EAAA,CAAA;kBAAA,IAAA,QAAA,QAAA,CAAA,IAAA,GAAA,QAAA,CAAA,IAAA;qBAAA,CAAA;oBAC/B1C,kCAAAA,CAASC,MAAT,CACCd,mCADD,EAECuD,SAFD,EAGC9C,OAAO,CAACM,UAAR,CAAmBrB,qDAAnB;oBAEKqE,OANyB,GAMf,GAAA,CAAIjE,OAAO,CAACU,OAAZ,CAAoBQ,8BAAAA,CAAKE,UAAzB,EAAqCqC,SAArC;oBANe,QAAA,CAAA,IAAA,GAAA,CAAA;oBAAA,QAAA,CAAA,IAAA,GAAA,CAAA;2BAQVQ,OAAO,CAACC,KAAR;qBARU,CAAA;oBAQxBA,KARwB,GAQxBA,QAAAA,CAAAA,IAAAA;oBACAC,WATwB,GASVD,KAAK,CAACE,SAAN,KAAoBrB,iBATV;2BAAA,QAAA,CAAA,MAAA,EAAA,MAAA;wBAUrBsB,MAAM,EAAE,IAAV;wBAAgBH,KAAK,EAALA,KAAhB;wBAAuBC,WAAW,EAAXA,WAAvB;wBAAoCF,OAAO,EAAPA,OAAAA;;qBAVb,EAAA;oBAAA,QAAA,CAAA,IAAA,GAAA,EAAA;oBAAA,QAAA,CAAA,EAAA,GAAA,QAAA,EAAA,KAAA,GAAA,CAAA;oBAAA,EAAA,mBAYRK,IAAjB,CAAsB,QAAA,CAAA,EAAA,CAAEC,QAAF,KAZG,CAAA;wBAAA,QAAA,CAAA,IAAA,GAAA,EAAA;;oBAAA,CAAA;oBAAA,KAAA,CAAA,QAAA,CAAA,EAAA;qBAAA,EAAA;2BAAA,QAAA,CAAA,MAAA,EAAA,MAAA;wBAgBtBC,KAAK,EAAE,KAAT;wBAAgBP,OAAO,EAAPA,OAAAA;;qBAhBQ,EAAA;sBAAA,GAAA;2BAAA,QAAA,CAAA,IAAA;;QAAA,CAAA,EAAA,OAAA,EAAA,IAAA;;gBAAA,CAAA;gBAAA,EAAA;;;IAAA,CAAH;oBAAhB1B,gBAAgB,CAAA,EAAA,EAAA,CAAA;eAAA,IAAA,CAAA,KAAA,OAAA,SAAA;IAAA,CAAA;AAAA,CAAA;A,yB,C,gB,G,sC;;;;C,U;A,M,C,c,C,yB,G,U;I,K,E,I;;A,yB,C,Q,G,yB,C,Y,G,yB,C,e,G,yB,C,U,G,yB,C,e,Q,C;;S,wC,C,G,E,O,E,M,E,K,E,M,E,G,E,G,E,C;Q,C;Q,G,C,I,G,G,C,G,E,G;Q,G,C,K,G,I,C,K;I,C,Q,K,E,C;Q,M,C,K;;I,C;I,E,E,I,C,I,E,O,C,K;S,O,C,O,C,K,E,I,C,K,E,M;A,C;S,uC,C,E,E,C;sB,C;Q,G,C,I,S,I,G,S;e,G,C,O,U,O,E,M,E,C;Y,G,C,G,G,E,C,K,C,I,E,I;qB,K,C,K,E,C;gB,wC,C,G,E,O,E,M,E,K,E,M,G,I,G,K;Y,C;qB,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","sources":["src/index.js","src/nft.js","src/accounts.js","src/middleware.js"],"sourcesContent":["\n/// TODO clean up these deps\nconst {\n\tREACT_APP_FUNDING_ACCOUNT, NETWORK_ID, REACT_APP_APP_ROUTE,\n\tFUNDING_ACCOUNT_PUBLIC_KEY, FUNDING_ACCOUNT_PRIVATE_KEY,\n\tCONFIG_PATH,\n} = process.env;\n\nconst fs = require('fs');\nconst nearAPI = require('near-api-js');\nconst getConfig = require(CONFIG_PATH);\n\nimport { getType, getTypeSupply, nftContractPath } from './nft';\nimport { createAccount, getClientAccount } from './accounts';\nimport { validBlock, verifySignature, hasAccessKey, withNear } from './middleware';\n\nconst networkId = NETWORK_ID;\nconst { nodeUrl, walletUrl, explorerUrl, linkdropContractId } = getConfig(networkId);\nconst {\n\tkeyStores: { InMemoryKeyStore },\n\tNear,\n\tAccount,\n\tKeyPair,\n\tutils: { format: { parseNearAmount } },\n} = nearAPI;\n\n/// create the server's main funding account\nconst keyStore = new InMemoryKeyStore();\nkeyStore.setKey(\n\tnetworkId,\n\tREACT_APP_FUNDING_ACCOUNT,\n\tKeyPair.fromString(FUNDING_ACCOUNT_PRIVATE_KEY)\n);\nconst near = new Near({\n\tnetworkId,\n\tnodeUrl,\n\tdeps: { keyStore },\n});\nconst { connection } = near;\nconst contractAccount = new Account(connection, REACT_APP_FUNDING_ACCOUNT)\n\nmodule.exports = {\n\tnear,\n\tkeyStore,\n\tconnection,\n\n\t/// middleware\n\twithNear,\n\thasAccessKey,\n\tvalidBlock, verifySignature,\n\n\tcreateAccount,\n\tviewAccount: contractAccount,\n\n\tnetworkId,\n\tfundingAccount: new Account(connection, REACT_APP_FUNDING_ACCOUNT),\n\tfundingAccountId: REACT_APP_FUNDING_ACCOUNT,\n\taccountSuffix: '.' + REACT_APP_FUNDING_ACCOUNT,\n\tpublicKey: FUNDING_ACCOUNT_PUBLIC_KEY,\n\twalletUrl,\n\texplorerUrl,\n\tredirectUrl: REACT_APP_APP_ROUTE,\n\tnewAccountAmount: parseNearAmount('1'),\n\tnewContractAmount: parseNearAmount('5'),\n\n\tgetType,\n\tgetTypeSupply,\n\tgetClientAccount,\n\n\tlinkdrop: {\n\t\tcontractId: linkdropContractId,\n\t\tgetKey: () => KeyPair.fromRandom('ed25519'),\n\t\tgas: '50000000000000',\n\t\tattachedDeposit: parseNearAmount('0.02'),\n\t},\n\n\tnft: {\n\t\t// contractBytes: fs.readFileSync(nftContractPath),\n\t\tgas: '50000000000000',\n\t\tattachedDeposit: parseNearAmount('0.02'),\n\t},\n\n\tREACT_APP_FUNDING_ACCOUNT, NETWORK_ID, REACT_APP_APP_ROUTE,\n\tFUNDING_ACCOUNT_PUBLIC_KEY, FUNDING_ACCOUNT_PRIVATE_KEY,\n\n\tDEFAULT_CODE_HASH: '11111111111111111111111111111111',\n};\n","/// for interacting with nft-series contract\n/// https://github.com/near-apps/nft-series\nconst path = require('path');\n\nimport { viewAccount } from './index';\n\nexport const getType = async (contractId, token_type_title) => {\n\ttry {\n\t\treturn await viewAccount.viewFunction(contractId, 'nft_get_type', { token_type_title });\n\t} catch (e) {\n\t\tconsole.warn('error getType', e);\n\t\treturn null;\n\t}\n};\n\nexport const getTypeSupply = async (contractId, token_type_title) => {\n\ttry {\n\t\treturn await viewAccount.viewFunction(contractId, 'nft_supply_for_type', { token_type_title });\n\t} catch (e) {\n\t\tconsole.warn('error getTypeSupply', e);\n\t\treturn 0;\n\t}\n};\n\nexport const nftContractPath = path.join(__dirname, process.env.NFT_CONTRACT_PATH || '../../../out/main.wasm');","\nimport {\n\tnear, keyStore, networkId,\n\tcontractAccount,\n\tNEW_ACCOUNT_AMOUNT, FUNDING_ACCOUNT_PRIVATE_KEY,\n} from './index';\n\nexport const createAccount = (accountId, publicKey) => contractAccount.functionCall({\n\tcontractId: networkId,\n\tmethodName: 'create_account',\n\targs: {\n\t\tnew_account_id: accountId,\n\t\tnew_public_key: publicKey,\n\t},\n\tgas: GAS,\n\tattachedDeposit: NEW_ACCOUNT_AMOUNT\n});\n\nexport const getClientAccount = async (accountId) => {\n\tkeyStore.setKey(\n\t\tnetworkId,\n\t\taccountId,\n\t\tKeyPair.fromString(FUNDING_ACCOUNT_PRIVATE_KEY)\n\t);\n\tconst account = new nearAPI.Account(near.connection, accountId);\n\ttry {\n\t\tconst state = await account.state();\n\t\tconst hasContract = state.code_hash !== DEFAULT_CODE_HASH;\n\t\treturn { exists: true, state, hasContract, account };\n\t} catch (e) {\n\t\tif (!/does not exist/.test(e.toString())) {\n\t\t\tthrow e;\n\t\t}\n\t}\n\treturn { taken: false, account };\n};","/// koajs middleware \n\nconst nacl = require('tweetnacl');\nconst crypto = require('crypto');\nconst bs58 = require('bs58');\n\nimport { near } from './index';\n\nexport const VALID_BLOCK_AGE = 100;\n\nexport const validBlock = async (blockNumber) => {\n\tconst currentBlock = (await connection.provider.status()).sync_info.latest_block_height;\n\tconst givenBlock = Number(blockNumber);\n\n\tif (givenBlock <= currentBlock - VALID_BLOCK_AGE || givenBlock > currentBlock) {\n\t\treturn false;\n\t}\n\treturn true;\n};\n\nexport const verifySignature = async (accountId, data, signature, contractId = '') => {\n\tconst nearAccount = await near.account(accountId);\n\ttry {\n\t\tconst hash = crypto.createHash('sha256').update(data).digest();\n\t\tlet accessKeys = await nearAccount.getAccessKeys();\n\t\tif (contractId.length) {\n\t\t\taccessKeys = accessKeys.filter(({ access_key: { permission }}) => permission && permission.FunctionCall && permission.FunctionCall.receiver_id === contractId);\n\t\t} else {\n\t\t\taccessKeys = accessKeys.filter(({ access_key: { permission }}) => permission === 'FullAccess');\n\t\t}\n\t\treturn accessKeys.some(({ public_key }) => {\n\t\t\tconst publicKey = public_key.replace('ed25519:', '');\n\t\t\treturn nacl.sign.detached.verify(hash, Buffer.from(signature, 'base64'), bs58.decode(publicKey));\n\t\t});\n\t} catch (e) {\n\t\tconsole.error(e);\n\t\treturn false;\n\t}\n};\n\nexport const hasAccessKey = async (ctx, next) => {\n\tconst { accountId, contractId, blockNumber, blockNumberSignature } = ctx.request.body;\n    \n\tif (!accountId || !contractId || !blockNumber || !blockNumberSignature) {\n\t\tctx.throw(403, 'You must provide an accountId, contractId, blockNumber, and blockNumberSignature');\n\t}\n\t\n\tif (!(await validBlock(blockNumber))) {\n\t\tctx.throw(403, `You must provide a blockNumber within ${VALID_BLOCK_AGE} of the most recent block; provided: ${blockNumber}`);\n\t}\n\n\tif (!(await verifySignature(accountId, blockNumber, blockNumberSignature, contractId))) {\n\t\tctx.throw(403, `blockNumberSignature did not match a signature of blockNumber=${blockNumber} from accountId=${accountId}`);\n\t}\n\n\tctx.accountId = accountId;\n\tctx.networkId = process.env.NETWORK_ID;\n\n\treturn await next();\n};\n\nexport const withNear = async (ctx, next) => {\n\tctx.near = near;\n\tawait next();\n};"],"names":["process","env","REACT_APP_FUNDING_ACCOUNT","NETWORK_ID","REACT_APP_APP_ROUTE","FUNDING_ACCOUNT_PUBLIC_KEY","FUNDING_ACCOUNT_PRIVATE_KEY","CONFIG_PATH","fs","require","nearAPI","getConfig","networkId","nodeUrl","walletUrl","explorerUrl","linkdropContractId","InMemoryKeyStore","keyStores","Near","Account","KeyPair","parseNearAmount","utils","format","keyStore","setKey","fromString","near","deps","connection","contractAccount","module","exports","withNear","hasAccessKey","validBlock","verifySignature","createAccount","viewAccount","fundingAccount","fundingAccountId","accountSuffix","publicKey","redirectUrl","newAccountAmount","newContractAmount","getType","getTypeSupply","getClientAccount","linkdrop","contractId","getKey","fromRandom","gas","attachedDeposit","nft","DEFAULT_CODE_HASH","path","token_type_title","viewFunction","console","warn","nftContractPath","join","__dirname","NFT_CONTRACT_PATH","accountId","functionCall","methodName","args","new_account_id","new_public_key","GAS","NEW_ACCOUNT_AMOUNT","account","state","hasContract","code_hash","exists","test","toString","taken","nacl","crypto","bs58","VALID_BLOCK_AGE","blockNumber","provider","status","currentBlock","sync_info","latest_block_height","givenBlock","Number","data","signature","nearAccount","hash","createHash","update","digest","getAccessKeys","accessKeys","length","filter","permission","access_key","FunctionCall","receiver_id","some","public_key","replace","sign","detached","verify","Buffer","from","decode","error","ctx","next","request","body","blockNumberSignature"],"version":3,"file":"index.js.map","sourceRoot":"/"}